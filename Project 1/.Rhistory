#geom_point(aes(x=latest2$longitude, y=latest2$latitude), colour = 'red', alpha = 0.1, data = latest2)
geom_density2d(data = latest2, aes(x = longitude, y = latitude), size = 0.3, fill  = score) +
stat_density2d(data = latest2, aes(x = longitude, y = latitude, fill = score, alpha = ..level..),  geom = "polygon") +
#scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
?stat_density2d
ggmap(m) +
#geom_point(aes(x=latest2$longitude, y=latest2$latitude), colour = 'red', alpha = 0.1, data = latest2)
geom_density2d(data = latest2, aes(x = longitude, y = latitude), size = 0.3) +
stat_density2d(data = latest2, aes(x = longitude, y = latitude, fill = ..density.., alpha = ..level..),  geom = "polygon") +
#scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
ggmap(m) +
#geom_point(aes(x=latest2$longitude, y=latest2$latitude), colour = 'red', alpha = 0.1, data = latest2)
geom_density2d(data = latest2, aes(x = longitude, y = latitude), size = 0.3) +
stat_density2d(data = latest2, aes(x = longitude, y = latitude, fill = ..score.., alpha = ..score..),  geom = "polygon") +
#scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
ggmap(m) +
#geom_point(aes(x=latest2$longitude, y=latest2$latitude), colour = 'red', alpha = 0.1, data = latest2)
geom_density2d(data = latest2, aes(x = longitude, y = latitude), size = 0.3) +
stat_density2d(data = latest2, aes(x = longitude, y = latitude, fill = ..level.., alpha = ..level..),  geom = "polygon") +
#scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
ggmap(m) +
#geom_point(aes(x=latest2$longitude, y=latest2$latitude), colour = 'red', alpha = 0.1, data = latest2)
geom_density2d(data = latest2, aes(x = longitude, y = latitude), size = 0.3) +
stat_density2d(data = latest2, aes(x = longitude, y = latitude, fill = ..level.., alpha = ..level..),  geom = "polygon") +
scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
latest[is.na(latest$longitude),]
View(latest)
View(raw)
latest2=left_join(latest[latest$boro!= 'Missing',], zips, by='zipcode')
head(zips)
zips[zips$zipcode == 10065,]
latest2[is.na(latest2$longitude),]
unique(latest2[is.na(latest2$longitude),zipcode])
unique(latest2[is.na(latest2$longitude),latest2$zipcode])
unique(latest2[is.na(latest2$longitude),latest2$zipcode])
unique(latest2[is.na(latest2$longitude),c('zipcode')])
latest2 = select(latest2, longitude, latitude, score)
sum(latest2$score)
total=sum(latest2$score)
n = dim(latest2)
latest2 = head(latest2)
f = function(x) {
score=latest2[x,score]
row=latest2[x,]
for(i in 1:score-1) {
rbind(latest2, row)
}
}
f(1)
f = function(x) {
score=latest2[x,latest2$score]
row=latest2[x,]
for(i in 1:score-1) {
rbind(latest2, row)
}
}
f = function(x) {
score=latest2[x,latest2$score]
row=latest2[x,]
for(i in 1:score-1) {
rbind(latest2, row)
}
}
f(1)
f(1)
f(1)
f = function(x) {
score=latest2[x,latest2$score]
cat("score")
row=latest2[x,]
for(i in 1:score-1) {
rbind(latest2, row)
}
f(1)
Q
Q
f(1)
df.expanded <- latest2[rep(row.names(latest2), latest2$score), ]
df.expanded
View(df.expanded)
latest2=left_join(latest[latest$boro!= 'Missing',], zips, by='zipcode')
latest2 = select(latest2, longitude, latitude, score)
latest3 = latest2[rep(row.names(latest2), latest2$score), ]
latest2 = left_join(latest[latest$boro!= 'Missing',], zips, by='zipcode')
latest2 = select(latest2, longitude, latitude, score)
latest3 = latest2[rep(row.names(latest2), latest2$score), ]
latest2 = left_join(latest[latest$boro!= 'Missing',], zips, by='zipcode') %>%
select(., longitude, latitude, score)
latest2[latest2$score==0,]
latest2[latest2$score<0,]
latest2[latest2$score<=0,]
latest_neg = [latest2$score<=0,]
latest_neg = latest2[latest2$score<=0,]
latest_pos = latest2[lateset2$score>0,]
latest3 = latest_pos[rep(row.names(latest_pos), latest_pos$score), ]
latest_neg = latest2[latest2$score<=0,]
latest_pos = latest2[lateset2$score>0,]
latest_pos = latest2[latest2$score>0,]
latest_neg = latest2[latest2$score<=0,]
latest_pos = latest2[latest2$score>0,]
latest3 = latest_pos[rep(row.names(latest_pos), latest_pos$score), ]
unique(latest2$score)
latest2 = left_join(latest[latest$boro!= 'Missing',], zips, by='zipcode') %>%
select(., longitude, latitude, score)
latest_neg = latest2[latest2$score<=0,]
latest_pos = latest2[latest2$score>0,]
latest3 = latest_pos[rep(row.names(latest_pos), latest_pos$score), ]
View(latest3)
latest_combined = rbind(latest_neg,latest_pos)
ggmap(m) +
#geom_point(aes(x=latest2$longitude, y=latest2$latitude), colour = 'red', alpha = 0.1, data = latest2)
geom_density2d(data = latest_combined, aes(x = longitude, y = latitude), size = 0.3) +
stat_density2d(data = latest_combined2, aes(x = longitude, y = latitude, fill = ..level.., alpha = ..level..),  geom = "polygon") +
scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
ggmap(m) +
#geom_point(aes(x=latest2$longitude, y=latest2$latitude), colour = 'red', alpha = 0.1, data = latest2)
geom_density2d(data = latest_combined, aes(x = longitude, y = latitude), size = 0.3) +
stat_density2d(data = latest_combined, aes(x = longitude, y = latitude, fill = ..level.., alpha = ..level..),  geom = "polygon") +
scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
View(latest_combined)
latest_combined = latest_combined[,-latest_combined$score]
latest_combined = latest_combined[,c('longitude','latitude')]
ggmap(m) +
#geom_point(aes(x=latest2$longitude, y=latest2$latitude), colour = 'red', alpha = 0.1, data = latest2)
geom_density2d(data = latest_combined, aes(x = longitude, y = latitude), size = 0.3) +
stat_density2d(data = latest_combined, aes(x = longitude, y = latitude, fill = ..level.., alpha = ..level..),  geom = "polygon") +
scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')
View(latest_combined)
View(latest)
View(latest2)
library(choroplethrZip)
latest %>%
group_by(., zipcode) %>%
summarise(., mean(score))
library(dplyr)
latest %>%
group_by(., zipcode) %>%
summarise(., mean(score))
avgbyzip = latest %>%
group_by(., zipcode) %>%
summarise(., avg=mean(score))
avgbyzip
avgbyzip = latest %>%
group_by(., zipcode) %>%
summarise(., mean(score))
colnames(avgbyzip) = c('region','value')
avgbyzip
data(zip.regions)
head(zip.regions)
summary(zip.regions)
##Option1: for loop
f1 = function(A, x) {
stopifnot(length(x)>0, nrow(A)>0, ncol(A)>0, is.numeric(A), is.numeric(x))
if (ncol(A) != length(x)) {
cat('Matrix column number and vector length don\'t match')
} else {
res = vector(mode = 'numeric', length = nrow(A)) #initialize empty output vector
for (i in 1:nrow(A)) {
res[i] = sum(A[i,]*x)
}
return(res)
}
}
##Option2: apply()
f2 = function(A, x) {
stopifnot(length(x)>0, nrow(A)>0, ncol(A)>0, is.numeric(A), is.numeric(x))
if (ncol(A) != length(x)) {
cat('Matrix column number and vector length don\'t match')
} else {
res = apply(A, 1, function(r) sum(r*x)) #1 indicates apply to rows
return(res)
}
}
##Example output
A = matrix(c(1:20), nrow = 4, ncol = 5)
x = seq(10,50,10)
f1(A,x)
f2(A,x)
as.vector(sapply(letters[1:5], function(x) paste(x, letters[1:5], sep='')))
list<-c("a","b","c","d","e")
sapply(list, paste0, list)
sapply(list, paste0, list)
c(sapply(list, paste0, list))
avgbyzip
?as.character
clean.zipcodes(avgbyzip$region)
library(zipcode)
clean.zipcodes(avgbyzip$region)
avgbyzip$region = clean.zipcodes(avgbyzip$region)
avgbyzip
?df_pop_zip
data(df_pop_zip)
?zip_choropleth
zip_choropleth(df_pop_zip,
state_zoom="new york",
title="2012 New York State ZCTA Population Estimates",
legend="Population")
head(df_pop_zip)
str(df_pop_zip)
zip_choropleth(avgbyzip,
state_zoom="new york",
title="NYC latest restaurant inspection score averages",
legend="Average scores"
zip_choropleth(avgbyzip,
state_zoom="new york",
title="NYC latest restaurant inspection score averages",
legend="Average scores")
?zip_choropleth
unique(zip.regions$county.fips.numeric)
unique(zip.regions$cbsa.title)
zip_choropleth(avgbyzip,
msa_zoom = "New York-Newark-Jersey City, NY-NJ-PA",
title="NYC latest restaurant inspection score averages",
legend="Average scores")
zip_choropleth(avgbyzip,
msa_zoom = "New York-Newark-Jersey City, NY-NJ-PA",
zip_zoom = '11102',
title="NYC latest restaurant inspection score averages",
legend="Average scores")
zip_zoom = c('11102','10017'),
zip_choropleth(avgbyzip,
msa_zoom = "New York-Newark-Jersey City, NY-NJ-PA",
zip_zoom = c('11102','10017'),
title="NYC latest restaurant inspection score averages",
legend="Average scores")
scored_zips = unique(avgbyzip$region)
zip_choropleth(avgbyzip,
msa_zoom = "New York-Newark-Jersey City, NY-NJ-PA",
zip_zoom = scored_zips,
title="NYC latest restaurant inspection score averages",
legend="Average scores")
missing_zips = c('10048','10055', '10057', '10104', '10105', '10106', '10107', '10118', '10121', '10123', '10155', '10166', '10175', '10176', '10178', '10179', '10281', '10285', '10317', '11242', '11249', '11256', '11352')
adjusted_zips = scored_zips - missing_zips
adjusted_zips = scored_zips[!(scored_zips %in% missing_zips)]
zip_choropleth(avgbyzip,
msa_zoom = "New York-Newark-Jersey City, NY-NJ-PA",
zip_zoom = adjusted_zips,
title="NYC latest restaurant inspection score averages",
legend="Average scores")
View(avgbyzip)
latest_short = latest[latest$zipcode %in% missing_zips,]
dim(latest_short)
library(dplyr)
library(zoo)
library(ggplot2)
library(reshape2)
setwd("~/Desktop/Project 1")
raw = read.csv("DOHMH_New_York_City_Restaurant_Inspection_Results.csv", stringsAsFactors = FALSE)
raw.df = tbl_df(raw)
names(raw.df) = tolower(names(raw.df))
raw.df = rename(raw.df, cuisine = cuisine.description)
raw.df$inspection.date = as.Date(raw.df$inspection.date, "%m/%d/%Y")
raw.df$grade.date = as.Date(raw.df$grade.date, "%m/%d/%Y")
raw.df$record.date = as.Date(raw.df$record.date, "%m/%d/%Y")
raw.df$phone = as.double(raw.df$phone)
raw.df$boro = factor(raw.df$boro, levels(factor(raw.df$boro))[c(1:3,5:6,4)])
levels(raw.df$boro) = c('Bronx','Brooklyn','Manhattan','Queens','Staten Island','Missing')
raw.df$cuisine = factor(raw.df$cuisine, levels(factor(raw.df$cuisine))[c(1:55,57,59:84,58,56)]) #Moving N/A and Other to the bottom of cuisine factors
raw.df$action = gsub(pattern = "Violations were cited in the following area\\(s\\).", replacement = "violations", x = raw.df$action, ignore.case = F)
raw.df$action = gsub(pattern = "No violations were recorded at the time of this inspection.", replacement = "no violations", x = raw.df$action, ignore.case = F)
raw.df$action = gsub(pattern = "Establishment re-opened by DOHMH", replacement = "reopened", x = raw.df$action, ignore.case = F)
raw.df$action = gsub(pattern = "Establishment Closed by DOHMH.  violationsand those requiring immediate action were addressed.", replacement = "closed", x = raw.df$action, ignore.case = F)
raw.df$action = gsub(pattern = "Establishment re-closed by DOHMH", replacement = "reclosed", x = raw.df$action, ignore.case = F)
##########################
###  Latest by borough ###
##########################
#Trimming down the data for exploration
data_trim = select(raw.df, -dba, -building, -street, -phone, -record.date, -violation.code, -violation.description, -critical.flag, -grade.date, -inspection.type, -grade, -action)
data_trim = unique(filter(data_trim, !is.na(data_trim$score))) #Eliminating NA and deduplicate
#Keeping latest scores only
latest = merge(aggregate(inspection.date ~ camis, data_trim, max), data_trim)
latest$new_score = ifelse(latest$score < 0, 'Negative', ifelse(latest$score < 14 , 'A', ifelse(latest$score < 28, 'B', 'C')))
unique(raw.df$boro)
raw.df[raw.df$boro=='Missing',]
missingBoro = raw.df[raw.df$boro=='Missing',]
View(missingBoro)
raw.df$boro[raw.df$zipcode==11249] = 'Brooklyn'
missingBoro = raw.df[raw.df$boro=='Missing',]
raw.df$boro[raw.df$zipcode==11249] = 'Brooklyn' #Fill missing data
raw.df = raw.df[raw.df$boro != 'Missing',] #Eliminate remaining rows with boro == 'Missing'; confirmed that none are in NYC
data_trim = select(raw.df, -dba, -building, -street, -phone, -record.date, -violation.code, -violation.description, -critical.flag, -grade.date, -inspection.type, -grade, -action)
data_trim = unique(filter(data_trim, !is.na(data_trim$score))) #Eliminating NA and deduplicate
latest = merge(aggregate(inspection.date ~ camis, data_trim, max), data_trim)
latest$new_score = ifelse(latest$score < 0, 'Negative', ifelse(latest$score < 14 , 'A', ifelse(latest$score < 28, 'B', 'C')))
scoreByBoro.gg = ggplot (data = latest[latest$boro != 'Missing',], aes (x = score)) +
geom_freqpoly(aes(color = boro), binwidth=2) +
coord_cartesian(xlim = c(0,40)) +
xlab("Score") + ylab("Count of establishments") +
scale_colour_discrete(name="Borough") +
ggtitle("Establishments by latest score and borough")
scoreByBoro.gg
scoreDensityByBoro.gg = ggplot (data = latest[latest$boro != 'Missing',], aes (x = score)) +
geom_density(aes(color = boro)) +
coord_cartesian(xlim = c(0,40)) +
xlab("Score") + ylab("Density") +
scale_colour_discrete(name="Borough") +
ggtitle("Density of establishments by latest score and borough")
scoreDensityByBoro.gg
scoreByBoro.gg = ggplot (data = latest[latest$boro != 'Missing',], aes (x = score)) +
geom_freqpoly(aes(color = boro), binwidth=1) +
coord_cartesian(xlim = c(0,40)) +
xlab("Score") + ylab("Count of establishments") +
scale_colour_discrete(name="Borough") +
ggtitle("Establishments by latest score and borough")
scoreByBoro.gg
scoreByBoro.gg = ggplot (data = latest[latest$boro != 'Missing',], aes (x = score)) +
geom_freqpoly(aes(color = boro), binwidth=2) +
#coord_cartesian(xlim = c(0,40)) +
xlab("Score") + ylab("Count of establishments") +
scale_colour_discrete(name="Borough") +
ggtitle("Establishments by latest score and borough")
scoreByBoro.gg
scoreDensityByBoro.gg = ggplot (data = latest[latest$boro != 'Missing',], aes (x = score)) +
geom_density(aes(color = boro)) +
#coord_cartesian(xlim = c(0,40)) +
xlab("Score") + ylab("Density") +
scale_colour_discrete(name="Borough") +
ggtitle("Density of establishments by latest score and borough")
scoreDensityByBoro.gg
scoreByBoro.gg = ggplot (data = latest[latest$boro != 'Missing',], aes (x = score)) +
geom_freqpoly(aes(color = boro), binwidth=2) +
coord_cartesian(xlim = c(0,60)) +
xlab("Score") + ylab("Count of establishments") +
scale_colour_discrete(name="Borough") +
ggtitle("Establishments by latest score and borough")
scoreByBoro.gg
scoreDensityByBoro.gg = ggplot (data = latest[latest$boro != 'Missing',], aes (x = score)) +
geom_density(aes(color = boro)) +
coord_cartesian(xlim = c(0,60)) +
xlab("Score") + ylab("Density") +
scale_colour_discrete(name="Borough") +
ggtitle("Density of establishments by latest score and borough")
scoreDensityByBoro.gg
scoreByBoro.gg = ggplot (data = latest[latest$boro != 'Missing',], aes (x = score)) +
geom_freqpoly(aes(color = boro), binwidth=2) +
coord_cartesian(xlim = c(0,40)) +
xlab("Score") + ylab("Count of establishments") +
scale_colour_discrete(name="Borough") +
ggtitle("Establishments by latest score and borough")
scoreByBoro.gg
scoreDensityByBoro.gg = ggplot (data = latest[latest$boro != 'Missing',], aes (x = score)) +
geom_density(aes(color = boro)) +
coord_cartesian(xlim = c(0,40)) +
xlab("Score") + ylab("Density") +
scale_colour_discrete(name="Borough") +
ggtitle("Density of establishments by latest score and borough")
scoreDensityByBoro.gg
scoreByBoro.gg = ggplot (data = latest[latest$boro != 'Missing',], aes (x = score)) +
geom_freqpoly(aes(color = boro), binwidth=1) +
coord_cartesian(xlim = c(0,40)) +
xlab("Score") + ylab("Count of establishments") +
scale_colour_discrete(name="Borough") +
ggtitle("Establishments by latest score and borough")
scoreByBoro.gg
scoreByBoro.gg = ggplot (data = latest[latest$boro != 'Missing',], aes (x = score)) +
geom_freqpoly(aes(color = boro), binwidth=2) +
coord_cartesian(xlim = c(0,40)) +
xlab("Score") + ylab("Count of establishments") +
scale_colour_discrete(name="Borough") +
ggtitle("Establishments by latest score and borough")
scoreByBoro.gg
scoreDensityByBoro.gg = ggplot (data = latest[latest$boro != 'Missing',], aes (x = score)) +
geom_density(aes(color = boro)) +
coord_cartesian(xlim = c(0,40)) +
xlab("Score") + ylab("Density") +
scale_colour_discrete(name="Borough") +
ggtitle("Density of establishments by latest score and borough")
scoreDensityByBoro.gg
filter(raw.df, boro =='Missing')
filter(raw.df, score<0)
neg_score = filter(raw.df, score<0)
rm(missingBoro)
View(neg_score)
unique(raw.df$zipcode)
unique(raw.df$cuisine)
unique(raw.df$inspection.date)
unique(raw.df$action)
filter(raw.df, inspection.date =='')
filter(raw.df, action =='')
missingaction = filter(raw.df, action =='')
View(missingaction)
unique(missingaction$inspection.date)
unique(missingaction$score)
filter(raw.df, inspection.date =='1900-01-01')
raw.df = raw.df[raw.df$inspection.date > '1900-01-01',]
filter(raw.df, inspection.date =='1900-01-01')
filter(raw.df, action =='')
filter(raw.df, inspection.date =='')
unique(raw.df$inspection.date)
unique(raw.df$action)
View(raw.df)
rm(missingaction)
filter(raw.df, is.na(grade))
filter(raw.df,grade='')
filter(raw.df,grade=='')
filter(raw.df,is.na(score))
raw.df = raw.df[!is.na(raw.df$score),] #Eliminate rows without a score
raw.df$boro[raw.df$zipcode==11249] = 'Brooklyn' #Fill missing data
raw.df = raw.df[raw.df$boro != 'Missing',] #Eliminate remaining rows with boro == 'Missing'; confirmed that none are in NYC
raw.df = raw.df[raw.df$inspection.date > '1900-01-01',] #Eliminate rows where the restaurant hasn't been inspected yet
raw.df = raw.df[!is.na(raw.df$score),] #Eliminate rows without a score
raw.df = tbl_df(raw)
names(raw.df) = tolower(names(raw.df))
raw.df = rename(raw.df, cuisine = cuisine.description)
raw.df$inspection.date = as.Date(raw.df$inspection.date, "%m/%d/%Y")
raw.df$grade.date = as.Date(raw.df$grade.date, "%m/%d/%Y")
raw.df$record.date = as.Date(raw.df$record.date, "%m/%d/%Y")
raw.df$phone = as.double(raw.df$phone)
raw.df$boro = factor(raw.df$boro, levels(factor(raw.df$boro))[c(1:3,5:6,4)])
levels(raw.df$boro) = c('Bronx','Brooklyn','Manhattan','Queens','Staten Island','Missing')
raw.df$cuisine = factor(raw.df$cuisine, levels(factor(raw.df$cuisine))[c(1:55,57,59:84,58,56)]) #Moving N/A and Other to the bottom of cuisine factors
raw.df$action = gsub(pattern = "Violations were cited in the following area\\(s\\).", replacement = "violations", x = raw.df$action, ignore.case = F)
raw.df$action = gsub(pattern = "No violations were recorded at the time of this inspection.", replacement = "no violations", x = raw.df$action, ignore.case = F)
raw.df$action = gsub(pattern = "Establishment re-opened by DOHMH", replacement = "reopened", x = raw.df$action, ignore.case = F)
raw.df$action = gsub(pattern = "Establishment Closed by DOHMH.  violationsand those requiring immediate action were addressed.", replacement = "closed", x = raw.df$action, ignore.case = F)
raw.df$action = gsub(pattern = "Establishment re-closed by DOHMH", replacement = "reclosed", x = raw.df$action, ignore.case = F)
raw.df$boro[raw.df$zipcode==11249] = 'Brooklyn' #Fill missing data
raw.df = raw.df[raw.df$boro != 'Missing',] #Eliminate remaining rows with boro == 'Missing'; confirmed that none are in NYC
raw.df = raw.df[raw.df$inspection.date > '1900-01-01',] #Eliminate rows where the restaurant hasn't been inspected yet
raw.df = raw.df[!is.na(raw.df$score),] #Eliminate rows without a score
##########################
###  Latest by borough ###
##########################
#Trimming down the data for exploration
data_trim = unique(select(raw.df, -dba, -building, -street, -phone, -record.date, -violation.code, -violation.description, -critical.flag, -grade.date, -inspection.type, -grade, -action))
View(data_trim)
inspections = unique(raw.df[raw.df$inspection.date>0,c('camis','boro','inspection.date', 'action')])
View(inspections)
View(data_trim)
inspections = unique(raw.df[,c('camis','boro','inspection.date', 'action')])
View(inspections)
View(data_trim)
temp=data_trim[,c('camis','boro','score')]
temp=unique(temp)
temp=unique(data_trim[,c('camis','boro','inspection.date')])
temp=unique(data_trim[,c('camis','inspection.date')])
temp=unique(data_trim[,c('camis','boro','inspection.date')])
temp=unique(data_trim[,c('camis','inspection.date')])
unique(inspections)
unique(data_trim)
data_trim = unique(select(raw.df, -dba, -building, -street, -phone, -record.date, -violation.code, -violation.description, -critical.flag, -grade.date, -inspection.type, -grade)) #, -action))
unique(data_trim[,-"score"])
unique(data_trim[,-score])
unique(data_trim[,1:6])
raw.df = raw.df[!is.na(raw.df$score) | raw.df$score < 0,] #Eliminate rows without a score
d
data_trim = unique(select(raw.df, -dba, -building, -street, -phone, -record.date, -violation.code, -violation.description, -critical.flag, -grade.date, -inspection.type, -grade)) #, -action))
raw.df$boro[raw.df$zipcode==11249] = 'Brooklyn' #Fill missing data
raw.df = raw.df[raw.df$boro != 'Missing',] #Eliminate remaining rows with boro == 'Missing'; confirmed that none are in NYC
raw.df = raw.df[raw.df$inspection.date > '1900-01-01',] #Eliminate rows where the restaurant hasn't been inspected yet
raw.df = raw.df[!is.na(raw.df$score) | raw.df$score < 0,] #Eliminate rows without a score
data_trim = unique(select(raw.df, -dba, -building, -street, -phone, -record.date, -violation.code, -violation.description, -critical.flag, -grade.date, -inspection.type, -grade)) #, -action))
raw.df$boro[raw.df$zipcode==11249] = 'Brooklyn' #Fill missing data
raw.df = raw.df[raw.df$boro != 'Missing',] #Eliminate remaining rows with boro == 'Missing'; confirmed that none are in NYC
raw.df = raw.df[raw.df$inspection.date > '1900-01-01',] #Eliminate rows where the restaurant hasn't been inspected yet
raw.df = raw.df[!is.na(raw.df$score),] #Eliminate rows without a score
raw.df = raw.df[raw.df$score < 0,] #Eliminate rows with a negative score
data_trim = unique(select(raw.df, -dba, -building, -street, -phone, -record.date, -violation.code, -violation.description, -critical.flag, -grade.date, -inspection.type, -grade)) #, -action))
raw.df = raw.df[!is.na(raw.df$score) | raw.df$score >= 0,] #Eliminate rows without a score
data_trim = unique(select(raw.df, -dba, -building, -street, -phone, -record.date, -violation.code, -violation.description, -critical.flag, -grade.date, -inspection.type, -grade)) #, -action))
raw.df = raw.df[raw.df$score >= 0,] #Eliminate rows without a score
data_trim = unique(select(raw.df, -dba, -building, -street, -phone, -record.date, -violation.code, -violation.description, -critical.flag, -grade.date, -inspection.type, -grade)) #, -action))
raw.df = raw.df[raw.df$score > 0,] #Eliminate rows without a score
data_trim = unique(select(raw.df, -dba, -building, -street, -phone, -record.date, -violation.code, -violation.description, -critical.flag, -grade.date, -inspection.type, -grade)) #, -action))
View(raw.df)
raw.df = tbl_df(raw)
names(raw.df) = tolower(names(raw.df))
raw.df = rename(raw.df, cuisine = cuisine.description)
raw.df$inspection.date = as.Date(raw.df$inspection.date, "%m/%d/%Y")
raw.df$grade.date = as.Date(raw.df$grade.date, "%m/%d/%Y")
raw.df$record.date = as.Date(raw.df$record.date, "%m/%d/%Y")
raw.df$phone = as.double(raw.df$phone)
raw.df$boro = factor(raw.df$boro, levels(factor(raw.df$boro))[c(1:3,5:6,4)])
levels(raw.df$boro) = c('Bronx','Brooklyn','Manhattan','Queens','Staten Island','Missing')
raw.df$cuisine = factor(raw.df$cuisine, levels(factor(raw.df$cuisine))[c(1:55,57,59:84,58,56)]) #Moving N/A and Other to the bottom of cuisine factors
raw.df$action = gsub(pattern = "Violations were cited in the following area\\(s\\).", replacement = "violations", x = raw.df$action, ignore.case = F)
raw.df$action = gsub(pattern = "No violations were recorded at the time of this inspection.", replacement = "no violations", x = raw.df$action, ignore.case = F)
raw.df$action = gsub(pattern = "Establishment re-opened by DOHMH", replacement = "reopened", x = raw.df$action, ignore.case = F)
raw.df$action = gsub(pattern = "Establishment Closed by DOHMH.  violationsand those requiring immediate action were addressed.", replacement = "closed", x = raw.df$action, ignore.case = F)
raw.df$action = gsub(pattern = "Establishment re-closed by DOHMH", replacement = "reclosed", x = raw.df$action, ignore.case = F)
raw.df$boro[raw.df$zipcode==11249] = 'Brooklyn' #Fill missing data
raw.df = raw.df[raw.df$boro != 'Missing',] #Eliminate remaining rows with boro == 'Missing'; confirmed that none are in NYC
raw.df = raw.df[raw.df$inspection.date > '1900-01-01',] #Eliminate rows where the restaurant hasn't been inspected yet
raw.df = raw.df[!is.na(raw.df$score),] #Eliminate rows without a score
raw.df = raw.df[raw.df$score >= 0,] #Eliminate rows without a score
data_trim = unique(select(raw.df, -dba, -building, -street, -phone, -record.date, -violation.code, -violation.description, -critical.flag, -grade.date, -inspection.type, -grade)) #, -action))
latest = merge(aggregate(inspection.date ~ camis, data_trim, max), data_trim)
latest$new_score = ifelse(latest$score < 0, 'Negative', ifelse(latest$score < 14 , 'A', ifelse(latest$score < 28, 'B', 'C')))
inspections = unique(raw.df[,c('camis','boro','inspection.date', 'action')])
inspections$yearmon = as.Date(paste("1",strftime(inspections$inspection.date, "%m"), strftime(inspections$inspection.date, "%Y"), sep="."), format="%d.%m.%Y")
closings = filter(inspections, action %in% c('closed','reclosed'))
reclosings = filter(inspections, action == 'reclosed')
inspections = unique(select(raw.df, camis, boro, zipcode, cuisine, inspection.date, action, score)
inspections = unique(select(raw.df, camis, boro, zipcode, cuisine, inspection.date, action, score))
inspections$yearmon = as.Date(paste("1",strftime(inspections$inspection.date, "%m"), strftime(inspections$inspection.date, "%Y"), sep="."), format="%d.%m.%Y")
View(inspections)
rm(data_trim)
inspections = unique(select(raw.df, camis, boro, zipcode, cuisine, inspection.date, action, score))
inspections$yearmon = as.Date(paste("1",strftime(inspections$inspection.date, "%m"), strftime(inspections$inspection.date, "%Y"), sep="."), format="%d.%m.%Y")
inspections$new_grade = ifelse(inspections$score < 0, 'Negative', ifelse(latest$score < 14 , 'A', ifelse(latest$score < 28, 'B', 'C'))) #Assign grades based on scores (existing data may have score but no grade)
latest = merge(aggregate(inspection.date ~ camis, inspections, max), inspections)
View(latest)
