{
    "collab_server" : "",
    "contents" : "#Project 1\n\n##########################\n####     Data load    ####\n##########################\n\nlibrary(dplyr)\nlibrary(zoo)\nlibrary(ggplot2)\nlibrary(reshape2)\nsetwd(\"~/Desktop/Project 1\")\nraw = read.csv(\"DOHMH_New_York_City_Restaurant_Inspection_Results.csv\", stringsAsFactors = FALSE)\nraw.df = tbl_df(raw)\nnames(raw.df) = tolower(names(raw.df))\nraw.df = rename(raw.df, cuisine = cuisine.description)\n\nraw.df$inspection.date = as.Date(raw.df$inspection.date, \"%m/%d/%Y\")\nraw.df$grade.date = as.Date(raw.df$grade.date, \"%m/%d/%Y\")\nraw.df$record.date = as.Date(raw.df$record.date, \"%m/%d/%Y\")\nraw.df$phone = as.double(raw.df$phone)\nraw.df$boro = factor(raw.df$boro, levels(factor(raw.df$boro))[c(1:3,5:6,4)])\nlevels(raw.df$boro) = c('Bronx','Brooklyn','Manhattan','Queens','Staten Island','Missing')\nraw.df$cuisine = factor(raw.df$cuisine, levels(factor(raw.df$cuisine))[c(1:55,57,59:84,58,56)]) #Moving N/A and Other to the bottom of cuisine factors\n\nraw.df$action = gsub(pattern = \"Violations were cited in the following area\\\\(s\\\\).\", replacement = \"violations\", x = raw.df$action, ignore.case = F)\nraw.df$action = gsub(pattern = \"No violations were recorded at the time of this inspection.\", replacement = \"no violations\", x = raw.df$action, ignore.case = F)\nraw.df$action = gsub(pattern = \"Establishment re-opened by DOHMH\", replacement = \"reopened\", x = raw.df$action, ignore.case = F)\nraw.df$action = gsub(pattern = \"Establishment Closed by DOHMH.  violationsand those requiring immediate action were addressed.\", replacement = \"closed\", x = raw.df$action, ignore.case = F)\nraw.df$action = gsub(pattern = \"Establishment re-closed by DOHMH\", replacement = \"reclosed\", x = raw.df$action, ignore.case = F)\n\nraw.df$boro[raw.df$zipcode==11249] = 'Brooklyn' #Fill missing data\nraw.df = raw.df[raw.df$boro != 'Missing',] #Eliminate remaining rows with boro == 'Missing'; confirmed that none are in NYC\nraw.df = raw.df[raw.df$inspection.date > '1900-01-01',] #Eliminate rows where the restaurant hasn't been inspected yet\nraw.df = raw.df[!is.na(raw.df$score),] #Eliminate rows without a score\nraw.df = raw.df[raw.df$score >= 0,] #Eliminate rows with a negative score ----> PENDING\n\n\n##########################\n###  Latest by borough ###\n##########################\n\n#Creating table for unique inspections\ninspections = unique(select(raw.df, camis, boro, zipcode, cuisine, inspection.date, action, score))\ninspections$yearmon = as.Date(paste(\"1\",strftime(inspections$inspection.date, \"%m\"), strftime(inspections$inspection.date, \"%Y\"), sep=\".\"), format=\"%d.%m.%Y\")\ninspections$new_grade = ifelse(inspections$score < 0, 'Negative', ifelse(latest$score < 14 , 'A', ifelse(latest$score < 28, 'B', 'C'))) #Assign grades based on scores (existing data may have score but no grade)\n\n#Creating table for latest scores only\nlatest = merge(aggregate(inspection.date ~ camis, inspections, max), inspections)\n\n#Current graphs by borough\n\n#ggplot(data=latest, aes(x=boro)) + geom_bar(aes(fill=new_score))\n#ggplot(data=latest, aes(x=boro)) + geom_bar(aes(fill=new_score), position = 'fill')\n#ggplot(data=latest, aes(x=boro)) + geom_bar(aes(fill=new_score), position = 'dodge')\n#ggplot (data = latest, aes(x = boro, y = score)) + geom_boxplot()\n#ggplot (data = latest, aes(x=score)) + geom_histogram(binwidth = 2, aes(fill = boro))\n#ggplot (data = latest, aes(x=score)) + geom_histogram(binwidth = 2, aes(fill = new_score))\n\nscoreByBoro.gg = ggplot (data = latest[latest$boro != 'Missing',], aes (x = score)) + \n  geom_freqpoly(aes(color = boro), binwidth=2) + \n  coord_cartesian(xlim = c(0,40)) + \n  xlab(\"Score\") + ylab(\"Count of establishments\") + \n  scale_colour_discrete(name=\"Borough\") + \n  ggtitle(\"Establishments by latest score and borough\")\nscoreByBoro.gg\n\nscoreDensityByBoro.gg = ggplot (data = latest[latest$boro != 'Missing',], aes (x = score)) + \n  geom_density(aes(color = boro)) + \n  coord_cartesian(xlim = c(0,40)) +\n  xlab(\"Score\") + ylab(\"Density\") + \n  scale_colour_discrete(name=\"Borough\") + \n  ggtitle(\"Density of establishments by latest score and borough\")\nscoreDensityByBoro.gg\n\n\n\n##########################\n####     Closings     ####\n##########################\n\n###Distinct closings, reclosings, reopenings and inspections tables\nclosings = filter(inspections, action %in% c('closed','reclosed'))\nreclosings = filter(inspections, action == 'reclosed')\n#reopenings = unique(inspections[grep('reopen',inspections$action, ignore.case = T),])\n\ncntInspections = summarize(group_by(inspections, boro, yearmon), inspections = n())\ncntClosings = summarize(group_by(closings, boro, yearmon), closings = n())\ncntReclosings = summarize(group_by(reclosings, boro, yearmon),reclosings = n())\n#cntReopenings = summarize(group_by(reopenings, boro, yearmon), reopenings = n())\n\n\n###Closings by borough\nclosingRatio = cbind(summarize(group_by(cntClosings, boro), closings = sum(closings)), \n                     summarize(group_by(cntReclosings, boro), reclosings = sum(reclosings))[,2],\n                     summarize(group_by(filter(cntInspections, boro != 'Missing'), boro), inspections = sum(inspections))[,2])\nclosingRatio = mutate(closingRatio, closingRatio = closings / inspections)\n\nclosingRatio.gg = ggplot (data = closingRatio[closingRatio$boro != 'Missing',], aes (x = reorder(boro, -ratio), y = ratio)) + \n  geom_bar(stat='identity') +\n  xlab(\"Borough\") + ylab(\"Inspection closing ratio\") + \n  ggtitle('Inspection closing ratio by Borough')\nclosingRatio.gg #Overall inspection closing ratio by borough\n\ncntClosingsStats = merge(summarize(group_by(unique(select(closings, camis, boro)), boro), unique_camis_closed = n()),\n      summarize(group_by(unique(select(inspections, camis, boro)), boro), total_camis = n()),\n      by = 'boro')\ncntClosingsStats$ratio = cntClosingsStats$unique_camis_closed / cntClosingsStats$total_camis\ncntClosingsStats #Closings by count of camis and % of repeat offenders\n\n\n##Reclosings summary\nreclosingsByID = dcast(summarize(group_by(closings, camis, boro, action), n()), camis + boro ~ temp$action)\n\nclosedByBoro = group_by(reclosingsByID[reclosingsByID$closed >0,], boro) %>%\n  summarize(., closed = n())\nclosedOnceByBoro = group_by(reclosingsByID[reclosingsByID$closed == 1,], boro) %>%\n  summarize(., closed = n())\nclosedMoreThanOnceByBoro = group_by(reclosingsByID[reclosingsByID$closed > 1,], boro) %>%\n  summarize(., closed = n())\n\nreclosingsByBoro = cbind(closedByBoro, closedOnceByBoro[,2], closedMoreThanOnceByBoro[,2])\ncolnames(reclosingsByBoro) = c('boro','total_closed','closed_once','closed_more_than_once')\nreclosingsByBoro$ratioClosedMoreThanOnce = reclosingsByBoro$closed_more_than_once / reclosingsByBoro$total_closed\n\nggplot(data = reclosingsByBoro, aes(x=boro))\nreclosingRatio.gg = ggplot (data = reclosingsByBoro[!is.na(reclosingsByBoro$boro),], aes (x = reorder(boro, -ratioClosedMoreThanOnce), y = ratioClosedMoreThanOnce)) + \n  geom_bar(stat='identity') +\n  xlab(\"Borough\") + ylab(\"Repeat closing ratio\") + \n  ggtitle('Ratio of repeat closures by Borough')\nreclosingRatio.gg #Ratio of establishments closed more than once by borough\n\n\n###Graphs for closings and inspections over time by borough\n# closings.gg = ggplot (data = closings, aes (x = inspection.date)) + \n#   geom_freqpoly(aes(color = boro), binwidth = 90) + #confirm bin for dates\n#   xlab(\"Inspection Date\") + ylab(\"Count of closings\") + \n#   scale_colour_discrete(name=\"Borough\") + \n#   ggtitle(\"Count of closings over time by borough\")\n# closings.gg\n\nclosingDensity.gg = ggplot (data = closings, aes (x = inspection.date)) + \n  geom_density(aes(color = boro)) + \n  xlab(\"Inspection Date\") + ylab(\"Density of closings\") + \n  scale_colour_discrete(name=\"Borough\") + \n  ggtitle(\"Density of closings over time by borough\")\nclosingDensity.gg\n\n# inspections.gg = ggplot (data = inspections, aes (x = inspection.date)) + \n#   geom_freqpoly(aes(color = boro), binwidth=30) + \n#   xlab(\"Inspection Date\") + ylab(\"Count of inspections\") + \n#   scale_colour_discrete(name=\"Borough\") + \n#   ggtitle(\"Count of inspections over time by borough\")\n# inspections.gg\n\ninspectionsDensity.gg = ggplot (data = inspections[inspections$boro != 'Missing',], aes (x = inspection.date)) + \n  geom_density(aes(color = boro)) + \n  xlab(\"Inspection Date\") + ylab(\"Density of inspections\") + \n  scale_colour_discrete(name=\"Borough\") + \n  ggtitle(\"Density of inspections over time by borough\")\ninspectionsDensity.gg\n\n# inspectionSummaryByMonth = merge(cntInspections, cntClosings, by = c('boro','yearmon'), all=T)\n# inspectionSummaryByMonth = merge(inspectionSummaryByMonth, cntReclosings, by = c('boro','yearmon'), all=T)\n# inspectionSummaryByMonth = merge(inspectionSummaryByMonth, cntReopenings, by = c('boro','yearmon'), all=T)\n# inspectionSummaryByMonth$closingRatio = inspectionSummaryByMonth$closings / inspectionSummaryByMonth$inspections\n# \n# closingRatio.gg = ggplot(data=inspectionSummaryByMonth[!is.na(inspectionSummaryByMonth$closingRatio),], aes(x=yearmon)) +\n#   geom_line(aes(y=closingRatio, color = boro)) +\n#   xlab(\"Inspection Date\") + ylab(\"Closing ratio\") +\n#   scale_colour_discrete(name=\"Borough\") +\n#   ggtitle(\"Closing ratio by month by borough\")\n# closingRatio.gg\n# # ####################### => Too hard to read\n\n\n\n\n\n#By Time\nggplot (data = latest, aes(x = inspection.date, y = score)) + geom_point()\n\n#By aggregate stat\nggplot(data = mean_score_by_boro, aes(x=boro, y = latest_mean_score)) + geom_point()\n\n#Current graphs by cuisine\nggplot(data=latest, aes(x=reorder(latest$cuisine.description,latest$score), y=latest$score)) + coord_flip() + geom_bar(stat='identity')\n\n\n\n#Calculate latest aggregate stats\nmean_score_by_zip = group_by(latest, zipcode) %>%\n  summarise(round(mean(score),2))\nmean_score_by_zip$zipcode = as.character(mean_score_by_zip$zipcode)\n\nmean_score_by_cuisine = group_by(latest, cuisine) %>%\n  summarise(latest_mean_score = round(mean(score),2))\n\nmean_score_by_boro = group_by(latest, boro) %>%\n  summarise(round(mean(score),2))",
    "created" : 1461092838546.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3467404756",
    "id" : "2C115DD8",
    "lastKnownWriteTime" : 1461096266,
    "last_content_update" : 1461096266550,
    "path" : "~/Desktop/Project 1/Project 1 - Ho Fai Wong v2.R",
    "project_path" : "Project 1 - Ho Fai Wong v2.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}